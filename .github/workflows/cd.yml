name: CD

on:
  push:
    branches: ['main']

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://parlament.samorzad.pwr.edu.pl
    steps:
      - name: Deploy to remote host
        uses: appleboy/ssh-action@v0.1.10
        env:
          CI: true
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.PROXY_USERNAME }}
          proxy_key: ${{ secrets.KEY }}
          envs: CI
          script: |
            cd ${{ secrets.APP_DIR }}
            rm .env
            touch .env
            echo DATABASE_NAME=${{ secrets.DATABASE_NAME }} >> .env
            echo DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} >> .env
            echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
            echo DATABASE_FOLDER=${{ secrets.DATABASE_FOLDER }} >> .env
            cd apps/web
            rm .env.local
            touch .env.local
            echo NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }} >> .env.local
            echo NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }} >> .env.local
            echo NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} >> .env.local
            echo USOS_CLIENT_ID=${{ secrets.USOS_CLIENT_ID }} >> .env.local
            echo USOS_CLIENT_SECRET=${{ secrets.USOS_CLIENT_SECRET }} >> .env.local
            echo USOS_BASE_URL=${{ secrets.USOS_BASE_URL }} >> .env.local
            echo USOS_SCOPES=${{ secrets.USOS_SCOPES }} >> .env.local
            echo USOS_FIELDS=${{ secrets.USOS_FIELDS }} >> .env.local
            echo NODE_ENV=production >> .env.local
            cd ../..
            cd apps/api
            rm .env
            touch .env
            echo DATABASE_NAME=${{ secrets.DATABASE_NAME }} >> .env
            echo DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} >> .env
            echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
            echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
            echo USOS_CLIENT_ID=${{ secrets.USOS_CLIENT_ID }} >> .env
            echo USOS_CLIENT_SECRET=${{ secrets.USOS_CLIENT_SECRET }} >> .env
            echo USOS_BASE_URL=${{ secrets.USOS_BASE_URL }} >> .env
            echo USOS_SCOPES=${{ secrets.USOS_SCOPES }} >> .env.local
            echo USOS_FIELDS=${{ secrets.USOS_FIELDS }} >> .env.local
            echo STRAPI_PUBLIC_FOLDER=${{ secrets.STRAPI_PUBLIC_FOLDER }} >> .env
            echo API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }} >> .env
            echo AUTH_SECRET=${{ secrets.AUTH_SECRET }} >> .env
            echo STRAPI_URL=${{ vars.NEXT_PUBLIC_API_URL }} >> .env
            cp public/robots.txt ${{ secrets.STRAPI_PUBLIC_FOLDER }}
            cd ../..
            git pull
            yarn install --immutable
            yarn build
            pm2 reload ecosystem.config.js

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - name: Setup yarn
        run: yarn set version 3.6.1
      - name: Run install
        run: yarn install --immutable
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ vars.GIT_AUTHOR_NAME }}
          GIT_AUTHOR_EMAIL: ${{ vars.GIT_AUTHOR_EMAIL }}
          GIT_COMMITTER_NAME: ${{ vars.GIT_COMMITTER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ vars.GIT_COMMITTER_EMAIL }}
        run: yarn semantic-release
